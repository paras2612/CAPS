# -*- coding: utf-8 -*-
"""Feature_Evaluation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1z1XHBEiO8r6YynVW0NvLO9D9kL-QpYrd
"""

from sklearn.linear_model import LinearRegression
import os
import pandas as pd
from sklearn.metrics import mean_squared_error,mean_absolute_error
from sklearn.neighbors import KNeighborsRegressor
from sklearn.linear_model import LogisticRegression,LinearRegression

from sklearn.svm import SVR
from sklearn.pipeline import make_pipeline
from sklearn.preprocessing import StandardScaler
import numpy as np
from sklearn.metrics import r2_score
from collections import Counter
import numpy as np, scipy.stats as st

opath = "/content/drive/MyDrive/SWAT/SWAT_DailyFeatures/"
path = "/content/drive/MyDrive/SWAT/SWAT_Data/"
files = sorted(os.listdir(path))
c=0
s1=[]
s2=[]
s3=[]
t1=[]
t2=[]
t3=[]
m1=[]
m2=[]
m3=[]
# for j in range(1,9):
all_features = []
for i in files:
  if("csv" in i):
    dataset = pd.read_csv(path+i)
    dataset.head(5)
    '''if(j==1):
      with open(opath+i.split(".")[0]+"_FilterMethod.txt","r") as f:
        features = f.readlines()
        features = eval(features[0])
    '''
    #if(j==2):
    '''with open(opath+i.split(".")[0]+"_FisherScore.txt","r") as f:
      features = f.readlines()
      features = eval(features[0])
    '''
    #elif(j==3):
    '''with open(opath+i.split(".")[0]+"_Correlation.txt" , 'r') as f:
      features = f.readlines()
      features = eval(features[0])'''
    #elif(j==4):
    '''with open(opath+i.split(".")[0]+"_FFS.txt" , 'r') as f:
      features = f.readlines()
      features = eval(features[0])'''
    #elif(j==5):
    '''with open(opath+i.split(".")[0]+"_BFS.txt" , 'r') as f:
      features = f.readlines()
      features = eval(features[0])'''
    #elif(j==6):
    '''with open(opath+i.split(".")[0]+"_RFS.txt" , 'r') as f:
      features = f.readlines()
      features = eval(features[0])'''
    #elif(j==7):
    '''with open(opath+i.split(".")[0]+"_Lasso.txt" , 'r') as f:
      features = f.readlines()
      features = eval(features[0])'''
    cols = dataset.columns
    '''elif(j==8):
      with open(opath+i.split(".")[0]+"_RF.txt" , 'r') as f:    
        features = f.readlines()
        features = eval(features[0])'''
    all_features.append(cols) 
    '''y = dataset['WYLDmm'].values
    dataset2 = dataset.iloc[:,0:38]
    dataset2['AREAkm2'] = dataset.iloc[:,39]
    X = dataset2.values'''

    X = dataset[all_features[c]].values
    y = dataset['WYLDmm'].values

    #print(dataset[all_features[c]])

    reg = LinearRegression().fit(X, y)
    y_pred = reg.predict(X)
    s1.append(mean_squared_error(y, y_pred))
    s2.append(mean_absolute_error(y, y_pred))
    s3.append(np.sum(np.abs(np.subtract(y,y_pred))) / np.sum(np.abs(np.subtract(y, np.mean(y)))))
    #s3+=r2_score(y,y_pred)
    c+=1

    neigh = KNeighborsRegressor(n_neighbors=20)
    neigh.fit(X, y)
    y_pred = neigh.predict(X)
    t1.append(mean_squared_error(y, y_pred))
    t2.append(mean_absolute_error(y, y_pred))
    t3.append(np.sum(np.abs(np.subtract(y,y_pred))) / np.sum(np.abs(np.subtract(y, np.mean(y)))))
    #t3+=r2_score(y,y_pred)

    regr = make_pipeline(StandardScaler(), SVR(C=1.0, epsilon=0.2))
    regr.fit(X, y)
    y_pred = regr.predict(X)
    m1.append(mean_squared_error(y, y_pred))
    m2.append(mean_absolute_error(y, y_pred))
    m3.append(np.sum(np.abs(np.subtract(y,y_pred))) / np.sum(np.abs(np.subtract(y, np.mean(y)))))
#m3+=r2_score(y,y_pred)

'''if(j==1):
  print("*"*100,"Information Gain Features","*"*100)
elif(j==2):
  print("*"*100,"Fisher Score Features","*"*100)
elif(j==3):
  print("*"*100,"Correlation Features","*"*100)
elif(j==4):
  print("*"*100,"Forward Feature Selection Features","*"*100)
elif(j==5):
  print("*"*100,"Backward Feature Selection Features","*"*100)
elif(j==6):
  print("*"*100,"Recursive Feature Selection Features","*"*100)
elif(j==7):
  print("*"*100,"Lasso Regularization Features","*"*100)
elif(j==8):
  print("*"*100,"Random Forest Importance Features","*"*100)
flat_list = [item for sublist in all_features for item in sublist]
res = Counter(flat_list).most_common(21)
res1 = sorted(res,key=lambda l: l[1])
print(list(zip(*res1))[0])'''
#res = list(reduce(lambda i, j: i & j, (set(x) for x in all_features)))
#print(len(res))
#print(res)
print(st.t.interval(0.95, len(s1)-1, loc=np.mean(s1), scale=st.sem(s1)))
print(st.t.interval(0.95, len(s2)-1, loc=np.mean(s2), scale=st.sem(s2)))
print(st.t.interval(0.95, len(s3)-1, loc=np.mean(s3), scale=st.sem(s3)))
print(st.t.interval(0.95, len(t1)-1, loc=np.mean(t1), scale=st.sem(t1)))
print(st.t.interval(0.95, len(t2)-1, loc=np.mean(t2), scale=st.sem(t2)))
print(st.t.interval(0.95, len(t3)-1, loc=np.mean(t3), scale=st.sem(t3)))
print(st.t.interval(0.95, len(m1)-1, loc=np.mean(m1), scale=st.sem(m1)))
print(st.t.interval(0.95, len(m2)-1, loc=np.mean(m2), scale=st.sem(m2)))
print(st.t.interval(0.95, len(m3)-1, loc=np.mean(m3), scale=st.sem(m3)))
# print(s1/c,s2/c,s3/c)
# print(t1/c,t2/c,t3/c)
# print(m1/c,m2/c,m3/c)

from scipy.stats import sem

print(sem(s1),sem(t1),sem(m1))
print(sem(s2),sem(t2),sem(m2))
print(sem(s3),sem(t3),sem(m3))

print(dataset[cols])

print(sum(m1))

from sklearn.linear_model import LinearRegression
import os
import pandas as pd
from sklearn.metrics import mean_squared_error,mean_absolute_error
from sklearn.neighbors import KNeighborsRegressor

from sklearn.svm import SVR
from sklearn.pipeline import make_pipeline
from sklearn.preprocessing import StandardScaler
import numpy as np
from sklearn.metrics import r2_score
from collections import Counter

data = pd.read_csv("/content/AllData.csv")
print(data.columns)
dataset = pd.read_csv("/content/AllDataForDay1.csv")
data.columns = dataset.columns
for j in range(1,12):
  if(j==1):
    X = data[['CFH', 'EPCO', 'ALPHA_BF', 'Ave..AW.Incl..Rock.Frag1', 'SLSOIL', 'GWQMN', 'Ksat...est.........mm.hr.1', 'CFDEC', 'R2ADJ', 'ESCO', 'Crack.volume.potential.of.soil', 'HRU_SLP', 'DEP_IMP', 'DIS_STREAM', 'GW_DELAY', 'SLSUBBSN', 'SURLAG', 'Ksat...est.........mm.hr.3', 'CANMX']]
  elif(j==2):
    X = data[['REVAPMN', 'RCHRG_DP', 'SURLAG', 'GW_REVAP', 'GW_SPYLD', 'R2ADJ', 'CFDEC', 'HRU_SLP', 'OV_N', 'ALPHA_BF_D', 'DEP_IMP', 'EPCO', 'LAT_TTIME', 'CFH', 'SLSOIL', 'CF', 'HRU_FR', 'SLSUBBSN', 'DIS_STREAM', 'ESCO', 'CANMX']].values
  elif(j==3):
    X = data[['HRU_SLP', 'OV_N', 'Depth.................mm.1', 'Ksat...est.........mm.hr.3', 'Depth.................mm.3', 'Ave..AW.Incl..Rock.Frag2', 'Bulk.Density.Moist..g.cc.1', 'Ave..AW.Incl..Rock.Frag1', 'Bulk.Density.Moist..g.cc.2', 'CN2', 'AREAkm2', 'Ave..AW.Incl..Rock.Frag3', 'Bulk.Density.Moist..g.cc.3', 'SLSUBBSN']].values
  elif(j==4):
    X = data[['Depth.................mm.1', 'Depth.................mm.2', 'Depth.................mm.3', 'Bulk.Density.Moist..g.cc.1', 'Bulk.Density.Moist..g.cc.2', 'Bulk.Density.Moist..g.cc.3', 'Ave..AW.Incl..Rock.Frag1', 'Ave..AW.Incl..Rock.Frag2', 'Ave..AW.Incl..Rock.Frag3', 'Ksat...est.........mm.hr.1', 'Ksat...est.........mm.hr.2', 'Ksat...est.........mm.hr.3', 'CN2', 'GW_DELAY', 'ALPHA_BF', 'GWQMN', 'GW_REVAP', 'REVAPMN', 'RCHRG_DP']].values
  elif(j==5):
    X = data[['REVAPMN', 'RCHRG_DP', 'GW_SPYLD', 'ALPHA_BF_D', 'HRU_FR', 'DIS_STREAM', 'SLSUBBSN', 'HRU_SLP', 'OV_N', 'LAT_TTIME', 'SLSOIL', 'CANMX', 'ESCO', 'EPCO', 'DEP_IMP', 'CF', 'CFH', 'CFDEC', 'SURLAG', 'R2ADJ']].values
  elif(j==6):
    X = data[['Depth.................mm.1', 'Depth.................mm.2', 'Depth.................mm.3', 'Bulk.Density.Moist..g.cc.1', 'Bulk.Density.Moist..g.cc.2', 'Bulk.Density.Moist..g.cc.3', 'Ave..AW.Incl..Rock.Frag1', 'Ave..AW.Incl..Rock.Frag2', 'Ave..AW.Incl..Rock.Frag3', 'Ksat...est.........mm.hr.1', 'Ksat...est.........mm.hr.2', 'Ksat...est.........mm.hr.3', 'CN2', 'HRU_FR', 'DIS_STREAM', 'SLSUBBSN', 'HRU_SLP', 'OV_N', 'LAT_TTIME', 'SLSOIL']].values
  elif(j==7):
    X = data[['Ave..AW.Incl..Rock.Frag1', 'Ave..AW.Incl..Rock.Frag3', 'Ave..AW.Incl..Rock.Frag2', 'HRU_SLP', 'HRU_FR']].values
  elif(j==8):
    X = data[['Ave..AW.Incl..Rock.Frag2', 'Ksat...est.........mm.hr.2', 'Ave..AW.Incl..Rock.Frag3', 'SLSUBBSN', 'Ksat...est.........mm.hr.3', 'Ave..AW.Incl..Rock.Frag1', 'Ksat...est.........mm.hr.1', 'Bulk.Density.Moist..g.cc.2', 'Bulk.Density.Moist..g.cc.3', 'Depth.................mm.1', 'Bulk.Density.Moist..g.cc.1', 'Depth.................mm.2', 'Depth.................mm.3', 'OV_N', 'CN2', 'HRU_SLP', 'HRU_FR']].values
  elif(j==9):
    X = data[['AREAkm2', 'Ave..AW.Incl..Rock.Frag3', 'Bulk.Density.Moist..g.cc.2', 'Ave..AW.Incl..Rock.Frag1', 'Ave..AW.Incl..Rock.Frag2', 'Ksat...est.........mm.hr.1', 'Depth.................mm.3', 'Ksat...est.........mm.hr.2', 'Bulk.Density.Moist..g.cc.1', 'Ksat...est.........mm.hr.3', 'Bulk.Density.Moist..g.cc.3', 'HRU_SLP', 'Depth.................mm.2', 'Depth.................mm.1', 'OV_N', 'CN2', 'SLSUBBSN', 'HRU_FR']].values
  elif(j==10):
    X = data.iloc[:,0:38].values
  elif(j==11):
    X = data.iloc[:,[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 22, 24, 25, 26, 30, 39]].values

  y = data['WYLDmm'].values
  reg = LinearRegression().fit(X, y)
  
  neigh = KNeighborsRegressor(n_neighbors=20)
  neigh.fit(X, y)
  y_pred = neigh.predict(X)
  print(mean_squared_error(y, y_pred))
  print(mean_absolute_error(y, y_pred))
  print(np.sum(np.abs(np.subtract(y,y_pred))) / np.sum(np.abs(np.subtract(y, np.mean(y)))))

  regr = make_pipeline(StandardScaler(), SVR(C=1.0, epsilon=0.2))
  regr.fit(X, y)
  y_pred = regr.predict(X)
  print(mean_squared_error(y, y_pred))
  print(mean_absolute_error(y, y_pred))
  print(np.sum(np.abs(np.subtract(y,y_pred))) / np.sum(np.abs(np.subtract(y, np.mean(y)))))
  
  if(j==1):
    print("*"*100,"Information Gain Features","*"*100)
  elif(j==2):
    print("*"*100,"Fisher Score Features","*"*100)
  elif(j==3):
    print("*"*100,"Correlation Features","*"*100)
  elif(j==4):
    print("*"*100,"Forward Feature Selection Features","*"*100)
  elif(j==5):
    print("*"*100,"Backward Feature Selection Features","*"*100)
  elif(j==6):
    print("*"*100,"Recursive Feature Selection Features","*"*100)
  elif(j==7):
    print("*"*100,"Lasso Regularization Features","*"*100)
  elif(j==8):
    print("*"*100,"Random Forest Importance Features","*"*100)
  elif(j==9):
    print("*"*100,"Causal Features","*"*100)
  elif(j==10):
    print("*"*100,"All Features","*"*100)
  elif(j==11):
    print("*"*100,"SLLMB Features","*"*100)

from scipy.stats import sem

sem(s1)

''' MSE 
                    LR    KNR   SVR
FilterMethod        0.92  0.96  0.90
FisherScore         0.93  0.95  0.91
Correlation         0.87  0.90  0.86
FFS                 0.89  0.92  0.88
BFS                 0.93  0.94  0.90
RFS                 0.87  0.89  0.85
Lasso               0.92  0.91  0.92
RF                  0.88  0.90  0.87
Original            0.87  0.92  0.88
CausalFeatures      0.85  0.87  0.84
'''

''' MAE 
                    LR    KNR   SVR
FilterMethod        0.43  0.29  0.26
FisherScore         0.43  0.29  0.26
Correlation         0.40  0.26  0.22
FFS                 0.41  0.28  0.24
BFS                 0.43  0.29  0.25
RFS                 0.40  0.27  0.21
Lasso               0.43  0.28  0.23
RF                  0.40  0.26  0.21
Original            0.41  0.28  0.23
CausalFeatures      0.38  0.24  0.19
'''

''' RAE 
                    LR    KNR   SVR
FilterMethod        0.94  0.61  0.59
FisherScore         0.95  0.62  0.59
Correlation         0.88  0.58  0.55
FFS                 0.89  0.59  0.54
BFS                 0.95  0.59  0.56
RFS                 0.89  0.57  0.53
Lasso               0.94  0.60  0.57
RF                  0.88  0.56  0.52
Original            0.86  0.59  0.54
CausalFeatures      0.83  0.54  0.49
'''

'''a = dataset[['REVAPMN', 'RCHRG_DP', 'GW_SPYLD', 'ALPHA_BF_D', 'HRU_FR', 'DIS_STREAM', 'SLSUBBSN', 'HRU_SLP', 'OV_N', 'LAT_TTIME', 'SLSOIL', 'CANMX', 'ESCO', 'EPCO', 'DEP_IMP', 'CF', 'CFH', 'CFDEC', 'SURLAG', 'R2ADJ']]
print(dataset['WYLDmm'].std())
print(a.std()>0.1)'''

print(sem(s1),sem(s2),sem(s3),sem(t1),sem(t2),sem(t3),sem(m1),sem(m2),sem(m3))

import pandas as pd
dataset = pd.read_csv("/content/AllDataForDay1.csv")
print(dataset.columns[dataset.std()==0])
print(dataset.columns[[dataset.std()>0] and [dataset.std()<=0.1]])
print(dataset.columns[dataset.std()>0.1])
print(dataset.std())

c=c-1
print(s1/c,s2/c,s3/c)
print(t1/c,t2/c,t3/c)
print(m1/c,m2/c,m3/c)

import os
import pandas as pd
from collections import Counter


path = "/content/"
files = sorted(os.listdir(path))
all_features = []
for i in files:
  if("csv" in i):
    data = pd.read_csv(path+i)
    try:
      x = data.groupby("to").get_group("WYLDmm")['from'].values
    except:
      continue
    all_features.append(x)
flat_list = [item for sublist in all_features for item in sublist]
res = Counter(flat_list).most_common(21)
res1 = sorted(res,key=lambda l: l[1])

print(list(zip(*res1))[0])

'''
**************************************************************************************************** Information Gain Features ****************************************************************************************************
[('REVAPMN', 358), ('OV_N', 360), ('CFH', 362), ('EPCO', 363), ('ALPHA_BF', 364), ('Ave..AW.Incl..Rock.Frag1', 366), ('SLSOIL', 367), ('GWQMN', 368), ('Ksat...est.........mm.hr.1', 369), ('CFDEC', 370), ('R2ADJ', 370), ('ESCO', 372), ('Crack.volume.potential.of.soil', 374), ('HRU_SLP', 374), ('DEP_IMP', 376), ('DIS_STREAM', 377), ('GW_DELAY', 378), ('SLSUBBSN', 382), ('SURLAG', 383), ('Ksat...est.........mm.hr.3', 404), ('CANMX', 714)]
**************************************************************************************************** Fisher Score Features ****************************************************************************************************
[('REVAPMN', 413), ('RCHRG_DP', 457), ('SURLAG', 468), ('GW_REVAP', 485), ('GW_SPYLD', 485), ('R2ADJ', 541), ('CFDEC', 558), ('HRU_SLP', 561), ('OV_N', 566), ('ALPHA_BF_D', 570), ('DEP_IMP', 576), ('EPCO', 581), ('LAT_TTIME', 587), ('CFH', 592), ('SLSOIL', 616), ('CF', 619), ('HRU_FR', 659), ('SLSUBBSN', 662), ('DIS_STREAM', 670), ('ESCO', 675), ('CANMX', 682)]
**************************************************************************************************** Correlation Features ****************************************************************************************************
[('Ksat...est.........mm.hr.1', 25), ('HRU_FR', 30), ('Ksat...est.........mm.hr.2', 149), ('Depth.................mm.2', 164), ('HRU_SLP', 178), ('OV_N', 207), ('Depth.................mm.1', 218), ('Ksat...est.........mm.hr.3', 336), ('Depth.................mm.3', 364), ('Ave..AW.Incl..Rock.Frag2', 370), ('Bulk.Density.Moist..g.cc.1', 501), ('Ave..AW.Incl..Rock.Frag1', 580), ('Bulk.Density.Moist..g.cc.2', 645), ('CN2', 651), ('AREAkm2', 666), ('Ave..AW.Incl..Rock.Frag3', 693), ('Bulk.Density.Moist..g.cc.3', 704), ('SLSUBBSN', 715), ('WYLDmm', 730)]
**************************************************************************************************** Forward Feature Selection Features ****************************************************************************************************
[('Crack.volume.potential.of.soil', 730), ('Depth.................mm.1', 730), ('Depth.................mm.2', 730), ('Depth.................mm.3', 730), ('Bulk.Density.Moist..g.cc.1', 730), ('Bulk.Density.Moist..g.cc.2', 730), ('Bulk.Density.Moist..g.cc.3', 730), ('Ave..AW.Incl..Rock.Frag1', 730), ('Ave..AW.Incl..Rock.Frag2', 730), ('Ave..AW.Incl..Rock.Frag3', 730), ('Ksat...est.........mm.hr.1', 730), ('Ksat...est.........mm.hr.2', 730), ('Ksat...est.........mm.hr.3', 730), ('CN2', 730), ('GW_DELAY', 730), ('ALPHA_BF', 730), ('GWQMN', 730), ('GW_REVAP', 730), ('REVAPMN', 730), ('RCHRG_DP', 730)]
**************************************************************************************************** Backward Feature Selection Features ****************************************************************************************************
[('REVAPMN', 730), ('RCHRG_DP', 730), ('GW_SPYLD', 730), ('ALPHA_BF_D', 730), ('HRU_FR', 730), ('DIS_STREAM', 730), ('SLSUBBSN', 730), ('HRU_SLP', 730), ('OV_N', 730), ('LAT_TTIME', 730), ('SLSOIL', 730), ('CANMX', 730), ('ESCO', 730), ('EPCO', 730), ('DEP_IMP', 730), ('CF', 730), ('CFH', 730), ('CFDEC', 730), ('SURLAG', 730), ('R2ADJ', 730)]
**************************************************************************************************** Recursive Feature Selection Features ****************************************************************************************************
[('Depth.................mm.1', 730), ('Depth.................mm.2', 730), ('Depth.................mm.3', 730), ('Bulk.Density.Moist..g.cc.1', 730), ('Bulk.Density.Moist..g.cc.2', 730), ('Bulk.Density.Moist..g.cc.3', 730), ('Ave..AW.Incl..Rock.Frag1', 730), ('Ave..AW.Incl..Rock.Frag2', 730), ('Ave..AW.Incl..Rock.Frag3', 730), ('Ksat...est.........mm.hr.1', 730), ('Ksat...est.........mm.hr.2', 730), ('Ksat...est.........mm.hr.3', 730), ('CN2', 730), ('HRU_FR', 730), ('DIS_STREAM', 730), ('SLSUBBSN', 730), ('HRU_SLP', 730), ('OV_N', 730), ('LAT_TTIME', 730), ('SLSOIL', 730)]
**************************************************************************************************** Lasso Regularization Features ****************************************************************************************************
[('Bulk.Density.Moist..g.cc.3', 1), ('Bulk.Density.Moist..g.cc.2', 3), ('Bulk.Density.Moist..g.cc.1', 40), ('OV_N', 55), ('Ave..AW.Incl..Rock.Frag1', 606), ('Ave..AW.Incl..Rock.Frag3', 673), ('Ave..AW.Incl..Rock.Frag2', 709), ('HRU_SLP', 712), ('HRU_FR', 728)]
**************************************************************************************************** Random Forest Importance Features ****************************************************************************************************
[('Ave..AW.Incl..Rock.Frag2', 730), ('Ksat...est.........mm.hr.2', 730), ('Ave..AW.Incl..Rock.Frag3', 730), ('SLSUBBSN', 730), ('Ksat...est.........mm.hr.3', 730), ('Ave..AW.Incl..Rock.Frag1', 730), ('Ksat...est.........mm.hr.1', 730), ('Bulk.Density.Moist..g.cc.2', 730), ('Bulk.Density.Moist..g.cc.3', 730), ('Depth.................mm.1', 730), ('Bulk.Density.Moist..g.cc.1', 730), ('Depth.................mm.2', 730), ('Depth.................mm.3', 730), ('OV_N', 730), ('CN2', 730), ('HRU_SLP', 730), ('HRU_FR', 730)]
'''

''' MSE 
                    LR    KNR   SVR
FilterMethod        0.24  0.23  0.27
FisherScore         0.23  0.21  0.25
Correlation         0.18  0.16  0.17
FFS                 0.23  0.24  0.26
BFS                 0.22  0.20  0.24
RFS                 0.21  0.18  0.20
Lasso               0.23  0.21  0.25
RF                  0.20  0.18  0.21
Original            0.26  0.24  0.25              
CausalFeatures      0.12  0.11  0.14
'''

''' MAE 
                    LR    KNR   SVR
FilterMethod        0.14  0.12  0.15
FisherScore         0.13  0.11  0.17
Correlation         0.09  0.08  0.10
FFS                 0.15  0.14  0.16
BFS                 0.13  0.12  0.18
RFS                 0.11  0.10  0.15
Lasso               0.10  0.10  0.16
RF                  0.09  0.08  0.15
Original            0.14  0.12  0.17
CausalFeatures      0.07  0.05  0.09
'''

''' RAE 
                    LR    KNR   SVR
FilterMethod        1.20  0.99  1.26
FisherScore         1.10  0.98  1.18
Correlation         0.95  0.80  1.06
FFS                 1.09  0.95  1.19
BFS                 1.03  0.92  1.15
RFS                 1.09  0.96  1.27
Lasso               1.07  0.97  1.25
RF                  1.05  0.98  1.24
Original            1.00  0.90  1.28
CausalFeatures      0.72  0.60  1.03
'''